{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { doc, onSnapshot, setDoc, updateDoc } from \"firebase/firestore\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { useEffect } from \"react\";\nimport create from \"zustand\";\nimport { generateId } from \"../utils\";\nimport { firestore, storage } from \"./firebase\";\nconst useStore = create(set => ({\n  setProfile: profile => set({\n    profile\n  })\n}));\nexport const useProfile = ({\n  userId\n}) => {\n  _s();\n\n  const {\n    profile,\n    setProfile\n  } = useStore();\n  const profileDocRef = doc(firestore, \"profiles\", userId);\n  useEffect(() => {\n    return onSnapshot(profileDocRef, doc => {\n      const profile = doc.data();\n      setProfile(profile);\n    });\n  }, [profileDocRef, userId, setProfile]);\n\n  const updateProfilePicture = async ({\n    profilePictureFile\n  }) => {\n    const storageRef = ref(storage, `profilePictures/${generateId()}`);\n    await uploadBytes(storageRef, profilePictureFile);\n    const downloadUrl = await getDownloadURL(storageRef);\n    await setDoc(profileDocRef, {}, {\n      merge: true\n    });\n    await updateDoc(profileDocRef, {\n      profilePictureUrl: downloadUrl\n    });\n  };\n\n  const updateDisplayName = async ({\n    displayName\n  }) => {\n    await setDoc(profileDocRef, {}, {\n      merge: true\n    });\n    await updateDoc(profileDocRef, {\n      displayName\n    });\n  };\n\n  return {\n    profile,\n    updateProfilePicture,\n    updateDisplayName\n  };\n};\n\n_s(useProfile, \"xyyd5sA9q1M6QRBFRGPpqQqIzYY=\", false, function () {\n  return [useStore];\n});","map":{"version":3,"sources":["/Users/christophervouga/Documents/projects/fake-id/src/data-access/profile.ts"],"names":["doc","onSnapshot","setDoc","updateDoc","getDownloadURL","ref","uploadBytes","useEffect","create","generateId","firestore","storage","useStore","set","setProfile","profile","useProfile","userId","profileDocRef","data","updateProfilePicture","profilePictureFile","storageRef","downloadUrl","merge","profilePictureUrl","updateDisplayName","displayName"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,oBAAnD;AACA,SAASC,cAAT,EAAyBC,GAAzB,EAA8BC,WAA9B,QAAiD,kBAAjD;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;AAaA,MAAMC,QAAQ,GAAGJ,MAAM,CAAUK,GAAD,KAAU;AACxCC,EAAAA,UAAU,EAAGC,OAAD,IAAaF,GAAG,CAAC;AAAEE,IAAAA;AAAF,GAAD;AADY,CAAV,CAAT,CAAvB;AAIA,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoC;AAAA;;AAC5D,QAAM;AAAEF,IAAAA,OAAF;AAAWD,IAAAA;AAAX,MAA0BF,QAAQ,EAAxC;AAEA,QAAMM,aAAa,GAAGlB,GAAG,CAACU,SAAD,EAAY,UAAZ,EAAwBO,MAAxB,CAAzB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,WAAON,UAAU,CAACiB,aAAD,EAAiBlB,GAAD,IAAS;AACxC,YAAMe,OAAO,GAAGf,GAAG,CAACmB,IAAJ,EAAhB;AACAL,MAAAA,UAAU,CAACC,OAAD,CAAV;AACD,KAHgB,CAAjB;AAID,GALQ,EAKN,CAACG,aAAD,EAAgBD,MAAhB,EAAwBH,UAAxB,CALM,CAAT;;AAOA,QAAMM,oBAAoB,GAAG,OAAO;AAClCC,IAAAA;AADkC,GAAP,KAIvB;AACJ,UAAMC,UAAU,GAAGjB,GAAG,CAACM,OAAD,EAAW,mBAAkBF,UAAU,EAAG,EAA1C,CAAtB;AAEA,UAAMH,WAAW,CAACgB,UAAD,EAAaD,kBAAb,CAAjB;AAEA,UAAME,WAAW,GAAG,MAAMnB,cAAc,CAACkB,UAAD,CAAxC;AAEA,UAAMpB,MAAM,CAACgB,aAAD,EAAgB,EAAhB,EAAoB;AAAEM,MAAAA,KAAK,EAAE;AAAT,KAApB,CAAZ;AAEA,UAAMrB,SAAS,CAACe,aAAD,EAAgB;AAC7BO,MAAAA,iBAAiB,EAAEF;AADU,KAAhB,CAAf;AAGD,GAhBD;;AAkBA,QAAMG,iBAAiB,GAAG,OAAO;AAC/BC,IAAAA;AAD+B,GAAP,KAIpB;AACJ,UAAMzB,MAAM,CAACgB,aAAD,EAAgB,EAAhB,EAAoB;AAAEM,MAAAA,KAAK,EAAE;AAAT,KAApB,CAAZ;AAEA,UAAMrB,SAAS,CAACe,aAAD,EAAgB;AAC7BS,MAAAA;AAD6B,KAAhB,CAAf;AAGD,GAVD;;AAYA,SAAO;AACLZ,IAAAA,OADK;AAELK,IAAAA,oBAFK;AAGLM,IAAAA;AAHK,GAAP;AAKD,CA/CM;;GAAMV,U;UACqBJ,Q","sourcesContent":["import { doc, onSnapshot, setDoc, updateDoc } from \"firebase/firestore\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { useEffect } from \"react\";\nimport create from \"zustand\";\nimport { generateId } from \"../utils\";\nimport { firestore, storage } from \"./firebase\";\n\ntype IProfile = {\n  userId: string;\n  displayName?: string;\n  profilePictureUrl?: string;\n};\n\ntype IStore = {\n  profile?: Partial<IProfile>;\n  setProfile: (profile?: IProfile) => void;\n};\n\nconst useStore = create<IStore>((set) => ({\n  setProfile: (profile) => set({ profile }),\n}));\n\nexport const useProfile = ({ userId }: { userId: string }) => {\n  const { profile, setProfile } = useStore();\n\n  const profileDocRef = doc(firestore, \"profiles\", userId);\n\n  useEffect(() => {\n    return onSnapshot(profileDocRef, (doc) => {\n      const profile = doc.data() as IProfile | undefined;\n      setProfile(profile);\n    });\n  }, [profileDocRef, userId, setProfile]);\n\n  const updateProfilePicture = async ({\n    profilePictureFile,\n  }: {\n    profilePictureFile: File;\n  }) => {\n    const storageRef = ref(storage, `profilePictures/${generateId()}`);\n\n    await uploadBytes(storageRef, profilePictureFile);\n\n    const downloadUrl = await getDownloadURL(storageRef);\n\n    await setDoc(profileDocRef, {}, { merge: true });\n\n    await updateDoc(profileDocRef, {\n      profilePictureUrl: downloadUrl,\n    });\n  };\n\n  const updateDisplayName = async ({\n    displayName,\n  }: {\n    displayName: string;\n  }) => {\n    await setDoc(profileDocRef, {}, { merge: true });\n\n    await updateDoc(profileDocRef, {\n      displayName,\n    });\n  };\n\n  return {\n    profile,\n    updateProfilePicture,\n    updateDisplayName,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}