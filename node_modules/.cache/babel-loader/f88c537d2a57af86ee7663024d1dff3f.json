{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { doc, onSnapshot, setDoc, updateDoc } from \"firebase/firestore\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { useEffect, useRef } from \"react\";\nimport create from \"zustand\";\nimport { generateId } from \"../utils\";\nimport { firestore, storage } from \"./firebase\";\nconst useStore = create(set => ({\n  setProfile: profile => set({\n    profile\n  })\n}));\n\nconst getProfileDocRef = ({\n  userId\n}) => {\n  return doc(firestore, \"profiles\", userId);\n};\n\nexport const useProfile = ({\n  userId\n}) => {\n  _s();\n\n  const {\n    profile,\n    setProfile\n  } = useStore();\n  const profileDocRefRef = useRef(getProfileDocRef({\n    userId\n  }));\n  useEffect(() => {\n    setDoc(profileDocRefRef.current, {}, {\n      merge: true\n    });\n    return onSnapshot(profileDocRefRef.current, doc => {\n      const profile = doc.data();\n      setProfile(profile);\n    });\n  }, [userId, setProfile]);\n\n  const updateProfilePicture = async ({\n    profilePictureFile\n  }) => {\n    const storageRef = ref(storage, `profilePictures/${generateId()}`);\n    await uploadBytes(storageRef, profilePictureFile);\n    const downloadUrl = await getDownloadURL(storageRef);\n    await updateDoc(profileDocRefRef.current, {\n      profilePictureUrl: downloadUrl\n    });\n  };\n\n  const updateDisplayName = async ({\n    displayName\n  }) => {\n    await updateDoc(profileDocRefRef.current, {\n      displayName\n    });\n  };\n\n  return {\n    profile,\n    updateProfilePicture,\n    updateDisplayName\n  };\n};\n\n_s(useProfile, \"P2nat+IMib0wWkFHLc2Unir0+QI=\", false, function () {\n  return [useStore];\n});","map":{"version":3,"sources":["/Users/christophervouga/Documents/projects/fake-id/src/data-access/profile.ts"],"names":["doc","onSnapshot","setDoc","updateDoc","getDownloadURL","ref","uploadBytes","useEffect","useRef","create","generateId","firestore","storage","useStore","set","setProfile","profile","getProfileDocRef","userId","useProfile","profileDocRefRef","current","merge","data","updateProfilePicture","profilePictureFile","storageRef","downloadUrl","profilePictureUrl","updateDisplayName","displayName"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,oBAAnD;AACA,SAASC,cAAT,EAAyBC,GAAzB,EAA8BC,WAA9B,QAAiD,kBAAjD;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;AAaA,MAAMC,QAAQ,GAAGJ,MAAM,CAAUK,GAAD,KAAU;AACxCC,EAAAA,UAAU,EAAGC,OAAD,IAAaF,GAAG,CAAC;AAAEE,IAAAA;AAAF,GAAD;AADY,CAAV,CAAT,CAAvB;;AAIA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoC;AAC3D,SAAOlB,GAAG,CAACW,SAAD,EAAY,UAAZ,EAAwBO,MAAxB,CAAV;AACD,CAFD;;AAIA,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAED,EAAAA;AAAF,CAAD,KAAoC;AAAA;;AAC5D,QAAM;AAAEF,IAAAA,OAAF;AAAWD,IAAAA;AAAX,MAA0BF,QAAQ,EAAxC;AAEA,QAAMO,gBAAgB,GAAGZ,MAAM,CAACS,gBAAgB,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAAjB,CAA/B;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACdL,IAAAA,MAAM,CAACkB,gBAAgB,CAACC,OAAlB,EAA2B,EAA3B,EAA+B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA/B,CAAN;AAEA,WAAOrB,UAAU,CAACmB,gBAAgB,CAACC,OAAlB,EAA4BrB,GAAD,IAAS;AACnD,YAAMgB,OAAO,GAAGhB,GAAG,CAACuB,IAAJ,EAAhB;AACAR,MAAAA,UAAU,CAACC,OAAD,CAAV;AACD,KAHgB,CAAjB;AAID,GAPQ,EAON,CAACE,MAAD,EAASH,UAAT,CAPM,CAAT;;AASA,QAAMS,oBAAoB,GAAG,OAAO;AAClCC,IAAAA;AADkC,GAAP,KAIvB;AACJ,UAAMC,UAAU,GAAGrB,GAAG,CAACO,OAAD,EAAW,mBAAkBF,UAAU,EAAG,EAA1C,CAAtB;AAEA,UAAMJ,WAAW,CAACoB,UAAD,EAAaD,kBAAb,CAAjB;AAEA,UAAME,WAAW,GAAG,MAAMvB,cAAc,CAACsB,UAAD,CAAxC;AAEA,UAAMvB,SAAS,CAACiB,gBAAgB,CAACC,OAAlB,EAA2B;AACxCO,MAAAA,iBAAiB,EAAED;AADqB,KAA3B,CAAf;AAGD,GAdD;;AAgBA,QAAME,iBAAiB,GAAG,OAAO;AAC/BC,IAAAA;AAD+B,GAAP,KAIpB;AACJ,UAAM3B,SAAS,CAACiB,gBAAgB,CAACC,OAAlB,EAA2B;AACxCS,MAAAA;AADwC,KAA3B,CAAf;AAGD,GARD;;AAUA,SAAO;AACLd,IAAAA,OADK;AAELQ,IAAAA,oBAFK;AAGLK,IAAAA;AAHK,GAAP;AAKD,CA7CM;;GAAMV,U;UACqBN,Q","sourcesContent":["import { doc, onSnapshot, setDoc, updateDoc } from \"firebase/firestore\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { useEffect, useRef } from \"react\";\nimport create from \"zustand\";\nimport { generateId } from \"../utils\";\nimport { firestore, storage } from \"./firebase\";\n\ntype IProfile = {\n  userId: string;\n  displayName?: string;\n  profilePictureUrl?: string;\n};\n\ntype IStore = {\n  profile?: Partial<IProfile>;\n  setProfile: (profile?: IProfile) => void;\n};\n\nconst useStore = create<IStore>((set) => ({\n  setProfile: (profile) => set({ profile }),\n}));\n\nconst getProfileDocRef = ({ userId }: { userId: string }) => {\n  return doc(firestore, \"profiles\", userId);\n};\n\nexport const useProfile = ({ userId }: { userId: string }) => {\n  const { profile, setProfile } = useStore();\n\n  const profileDocRefRef = useRef(getProfileDocRef({ userId }));\n\n  useEffect(() => {\n    setDoc(profileDocRefRef.current, {}, { merge: true });\n\n    return onSnapshot(profileDocRefRef.current, (doc) => {\n      const profile = doc.data() as IProfile | undefined;\n      setProfile(profile);\n    });\n  }, [userId, setProfile]);\n\n  const updateProfilePicture = async ({\n    profilePictureFile,\n  }: {\n    profilePictureFile: File;\n  }) => {\n    const storageRef = ref(storage, `profilePictures/${generateId()}`);\n\n    await uploadBytes(storageRef, profilePictureFile);\n\n    const downloadUrl = await getDownloadURL(storageRef);\n\n    await updateDoc(profileDocRefRef.current, {\n      profilePictureUrl: downloadUrl,\n    });\n  };\n\n  const updateDisplayName = async ({\n    displayName,\n  }: {\n    displayName: string;\n  }) => {\n    await updateDoc(profileDocRefRef.current, {\n      displayName,\n    });\n  };\n\n  return {\n    profile,\n    updateProfilePicture,\n    updateDisplayName,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}