{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { onSnapshot, collection, query, where } from \"firebase/firestore\";\nimport { useEffect } from \"react\";\nimport create from \"zustand\";\nimport { firestore, storage } from \"./firebase\";\nimport { ref, uploadBytes } from \"firebase/storage\";\nimport { generateId } from \"../utils\";\nconst useStore = create(set => ({\n  setProfile: profile => set({\n    profile\n  })\n}));\nconst profilesRef = collection(firestore, \"profiles\");\nexport const useProfile = ({\n  userId\n}) => {\n  _s();\n\n  const {\n    profile,\n    setProfile\n  } = useStore();\n  useEffect(() => {\n    const profileQuery = query(profilesRef, where(\"userId\", \"==\", userId));\n    const unsubscribe = onSnapshot(profileQuery, snapshot => {\n      const profiles = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return data;\n      });\n      setProfile(profiles[0]);\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, [userId, setProfile]);\n\n  const addProfile = async ({\n    profilePictureFile\n  }) => {\n    const storageKey = `profilePictures/${generateId()}`;\n    await uploadBytes(ref(storage, storageKey), profilePictureFile); // await addDoc(profilesRef, profile);\n  };\n\n  return {\n    profile,\n    addProfile\n  };\n};\n\n_s(useProfile, \"xyyd5sA9q1M6QRBFRGPpqQqIzYY=\", false, function () {\n  return [useStore];\n});","map":{"version":3,"sources":["/Users/christophervouga/Documents/projects/fake-id/src/data-access/profile.ts"],"names":["onSnapshot","collection","query","where","useEffect","create","firestore","storage","ref","uploadBytes","generateId","useStore","set","setProfile","profile","profilesRef","useProfile","userId","profileQuery","unsubscribe","snapshot","profiles","docs","map","doc","data","addProfile","profilePictureFile","storageKey"],"mappings":";;AAAA,SAEEA,UAFF,EAGEC,UAHF,EAIEC,KAJF,EAKEC,KALF,QAMO,oBANP;AAOA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;AACA,SAAqBC,GAArB,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,SAASC,UAAT,QAA2B,UAA3B;AAaA,MAAMC,QAAQ,GAAGN,MAAM,CAAUO,GAAD,KAAU;AACxCC,EAAAA,UAAU,EAAGC,OAAD,IAAaF,GAAG,CAAC;AAAEE,IAAAA;AAAF,GAAD;AADY,CAAV,CAAT,CAAvB;AAIA,MAAMC,WAAW,GAAGd,UAAU,CAACK,SAAD,EAAY,UAAZ,CAA9B;AAEA,OAAO,MAAMU,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoC;AAAA;;AAC5D,QAAM;AAAEH,IAAAA,OAAF;AAAWD,IAAAA;AAAX,MAA0BF,QAAQ,EAAxC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,YAAY,GAAGhB,KAAK,CAACa,WAAD,EAAcZ,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiBc,MAAjB,CAAnB,CAA1B;AAEA,UAAME,WAAW,GAAGnB,UAAU,CAACkB,YAAD,EAAgBE,QAAD,IAAc;AACzD,YAAMC,QAAQ,GAAGD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAmBC,GAAD,IAAS;AAC1C,cAAMC,IAAI,GAAGD,GAAG,CAACC,IAAJ,EAAb;AACA,eAAOA,IAAP;AACD,OAHgB,CAAjB;AAKAZ,MAAAA,UAAU,CAACQ,QAAQ,CAAC,CAAD,CAAT,CAAV;AACD,KAP6B,CAA9B;AASA,WAAO,MAAM;AACXF,MAAAA,WAAW;AACZ,KAFD;AAGD,GAfQ,EAeN,CAACF,MAAD,EAASJ,UAAT,CAfM,CAAT;;AAiBA,QAAMa,UAAU,GAAG,OAAO;AACxBC,IAAAA;AADwB,GAAP,KAMb;AACJ,UAAMC,UAAU,GAAI,mBAAkBlB,UAAU,EAAG,EAAnD;AAEA,UAAMD,WAAW,CAACD,GAAG,CAACD,OAAD,EAAUqB,UAAV,CAAJ,EAA2BD,kBAA3B,CAAjB,CAHI,CAKJ;AACD,GAZD;;AAcA,SAAO;AACLb,IAAAA,OADK;AAELY,IAAAA;AAFK,GAAP;AAID,CAtCM;;GAAMV,U;UACqBL,Q","sourcesContent":["import {\n  addDoc,\n  onSnapshot,\n  collection,\n  query,\n  where,\n} from \"firebase/firestore\";\nimport { useEffect } from \"react\";\nimport create from \"zustand\";\nimport { firestore, storage } from \"./firebase\";\nimport { getStorage, ref, uploadBytes } from \"firebase/storage\";\nimport { generateId } from \"../utils\";\n\ntype IProfile = {\n  userId: string;\n  displayName?: string;\n  profilePictureUrl?: string;\n};\n\ntype IStore = {\n  profile?: Partial<IProfile>;\n  setProfile: (profile: IProfile) => void;\n};\n\nconst useStore = create<IStore>((set) => ({\n  setProfile: (profile) => set({ profile }),\n}));\n\nconst profilesRef = collection(firestore, \"profiles\");\n\nexport const useProfile = ({ userId }: { userId: string }) => {\n  const { profile, setProfile } = useStore();\n\n  useEffect(() => {\n    const profileQuery = query(profilesRef, where(\"userId\", \"==\", userId));\n\n    const unsubscribe = onSnapshot(profileQuery, (snapshot) => {\n      const profiles = snapshot.docs.map((doc) => {\n        const data = doc.data();\n        return data as IProfile;\n      });\n\n      setProfile(profiles[0]);\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [userId, setProfile]);\n\n  const addProfile = async ({\n    profilePictureFile,\n  }: {\n    displayName: string;\n    userId: string;\n    profilePictureFile: File;\n  }) => {\n    const storageKey = `profilePictures/${generateId()}`;\n\n    await uploadBytes(ref(storage, storageKey), profilePictureFile);\n\n    // await addDoc(profilesRef, profile);\n  };\n\n  return {\n    profile,\n    addProfile,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}