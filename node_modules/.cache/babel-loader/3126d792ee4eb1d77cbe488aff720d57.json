{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { doc, onSnapshot, updateDoc } from \"firebase/firestore\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { useEffect } from \"react\";\nimport create from \"zustand\";\nimport { generateId } from \"../utils\";\nimport { firestore, storage } from \"./firebase\";\nconst useStore = create(set => ({\n  setProfile: profile => set({\n    profile\n  })\n}));\n\nconst getProfileDocRef = ({\n  userId\n}) => {\n  return doc(firestore, \"profiles\", userId);\n};\n\nexport const useProfile = ({\n  userId\n}) => {\n  _s();\n\n  const {\n    profile,\n    setProfile\n  } = useStore();\n  useEffect(() => {\n    return onSnapshot(getProfileDocRef({\n      userId\n    }), doc => {\n      const profile = doc.data();\n      setProfile(profile);\n    });\n  }, [profileDocRef, userId, setProfile]);\n\n  const updateProfilePicture = async ({\n    profilePictureFile\n  }) => {\n    const storageRef = ref(storage, `profilePictures/${generateId()}`);\n    await uploadBytes(storageRef, profilePictureFile);\n    const downloadUrl = await getDownloadURL(storageRef); // await setDoc(profileDocRef, {}, { merge: true });\n\n    await updateDoc(getProfileDocRef({\n      userId\n    }), {\n      profilePictureUrl: downloadUrl\n    });\n  };\n\n  const updateDisplayName = async ({\n    displayName\n  }) => {\n    // await setDoc(profileDocRef, {}, { merge: true });\n    await updateDoc(getProfileDocRef({\n      userId\n    }), {\n      displayName\n    });\n  };\n\n  return {\n    profile,\n    updateProfilePicture,\n    updateDisplayName\n  };\n};\n\n_s(useProfile, \"xyyd5sA9q1M6QRBFRGPpqQqIzYY=\", false, function () {\n  return [useStore];\n});","map":{"version":3,"sources":["/Users/christophervouga/Documents/projects/fake-id/src/data-access/profile.ts"],"names":["doc","onSnapshot","updateDoc","getDownloadURL","ref","uploadBytes","useEffect","create","generateId","firestore","storage","useStore","set","setProfile","profile","getProfileDocRef","userId","useProfile","data","profileDocRef","updateProfilePicture","profilePictureFile","storageRef","downloadUrl","profilePictureUrl","updateDisplayName","displayName"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,UAAd,EAAkCC,SAAlC,QAAmD,oBAAnD;AACA,SAASC,cAAT,EAAyBC,GAAzB,EAA8BC,WAA9B,QAAiD,kBAAjD;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;AAaA,MAAMC,QAAQ,GAAGJ,MAAM,CAAUK,GAAD,KAAU;AACxCC,EAAAA,UAAU,EAAGC,OAAD,IAAaF,GAAG,CAAC;AAAEE,IAAAA;AAAF,GAAD;AADY,CAAV,CAAT,CAAvB;;AAIA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoC;AAC3D,SAAOhB,GAAG,CAACS,SAAD,EAAY,UAAZ,EAAwBO,MAAxB,CAAV;AACD,CAFD;;AAIA,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAED,EAAAA;AAAF,CAAD,KAAoC;AAAA;;AAC5D,QAAM;AAAEF,IAAAA,OAAF;AAAWD,IAAAA;AAAX,MAA0BF,QAAQ,EAAxC;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,WAAOL,UAAU,CAACc,gBAAgB,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAjB,EAAgChB,GAAD,IAAS;AACvD,YAAMc,OAAO,GAAGd,GAAG,CAACkB,IAAJ,EAAhB;AACAL,MAAAA,UAAU,CAACC,OAAD,CAAV;AACD,KAHgB,CAAjB;AAID,GALQ,EAKN,CAACK,aAAD,EAAgBH,MAAhB,EAAwBH,UAAxB,CALM,CAAT;;AAOA,QAAMO,oBAAoB,GAAG,OAAO;AAClCC,IAAAA;AADkC,GAAP,KAIvB;AACJ,UAAMC,UAAU,GAAGlB,GAAG,CAACM,OAAD,EAAW,mBAAkBF,UAAU,EAAG,EAA1C,CAAtB;AAEA,UAAMH,WAAW,CAACiB,UAAD,EAAaD,kBAAb,CAAjB;AAEA,UAAME,WAAW,GAAG,MAAMpB,cAAc,CAACmB,UAAD,CAAxC,CALI,CAOJ;;AAEA,UAAMpB,SAAS,CAACa,gBAAgB,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAjB,EAA+B;AAC5CQ,MAAAA,iBAAiB,EAAED;AADyB,KAA/B,CAAf;AAGD,GAhBD;;AAkBA,QAAME,iBAAiB,GAAG,OAAO;AAC/BC,IAAAA;AAD+B,GAAP,KAIpB;AACJ;AAEA,UAAMxB,SAAS,CAACa,gBAAgB,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAjB,EAA+B;AAC5CU,MAAAA;AAD4C,KAA/B,CAAf;AAGD,GAVD;;AAYA,SAAO;AACLZ,IAAAA,OADK;AAELM,IAAAA,oBAFK;AAGLK,IAAAA;AAHK,GAAP;AAKD,CA7CM;;GAAMR,U;UACqBN,Q","sourcesContent":["import { doc, onSnapshot, setDoc, updateDoc } from \"firebase/firestore\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { useEffect } from \"react\";\nimport create from \"zustand\";\nimport { generateId } from \"../utils\";\nimport { firestore, storage } from \"./firebase\";\n\ntype IProfile = {\n  userId: string;\n  displayName?: string;\n  profilePictureUrl?: string;\n};\n\ntype IStore = {\n  profile?: Partial<IProfile>;\n  setProfile: (profile?: IProfile) => void;\n};\n\nconst useStore = create<IStore>((set) => ({\n  setProfile: (profile) => set({ profile }),\n}));\n\nconst getProfileDocRef = ({ userId }: { userId: string }) => {\n  return doc(firestore, \"profiles\", userId);\n};\n\nexport const useProfile = ({ userId }: { userId: string }) => {\n  const { profile, setProfile } = useStore();\n\n  useEffect(() => {\n    return onSnapshot(getProfileDocRef({ userId }), (doc) => {\n      const profile = doc.data() as IProfile | undefined;\n      setProfile(profile);\n    });\n  }, [profileDocRef, userId, setProfile]);\n\n  const updateProfilePicture = async ({\n    profilePictureFile,\n  }: {\n    profilePictureFile: File;\n  }) => {\n    const storageRef = ref(storage, `profilePictures/${generateId()}`);\n\n    await uploadBytes(storageRef, profilePictureFile);\n\n    const downloadUrl = await getDownloadURL(storageRef);\n\n    // await setDoc(profileDocRef, {}, { merge: true });\n\n    await updateDoc(getProfileDocRef({ userId }), {\n      profilePictureUrl: downloadUrl,\n    });\n  };\n\n  const updateDisplayName = async ({\n    displayName,\n  }: {\n    displayName: string;\n  }) => {\n    // await setDoc(profileDocRef, {}, { merge: true });\n\n    await updateDoc(getProfileDocRef({ userId }), {\n      displayName,\n    });\n  };\n\n  return {\n    profile,\n    updateProfilePicture,\n    updateDisplayName,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}