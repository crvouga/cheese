{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { GoogleAuthProvider, onAuthStateChanged as onFirebaseAuthStateChanged, signInWithRedirect, signOut as firebaseSignOut } from \"firebase/auth\";\nimport { useEffect } from \"react\";\nimport create from \"zustand\";\nimport { auth } from \"./firebase\";\nconst useStore = create(set => ({\n  authState: {\n    status: \"loading\"\n  },\n  setAuthState: authState => set({\n    authState\n  })\n}));\nexport const useAuthState = () => {\n  _s();\n\n  const {\n    authState,\n    setAuthState\n  } = useStore();\n  useEffect(() => {\n    return onFirebaseAuthStateChanged(auth, firebaseUser => {\n      if (firebaseUser) {\n        setAuthState({\n          status: \"auth\",\n          authUser: {\n            userId: firebaseUser.uid\n          }\n        });\n        return;\n      }\n\n      setAuthState({\n        status: \"unauth\"\n      });\n    });\n  }, [setAuthState]);\n\n  const signIn = async ({\n    authMethod\n  }) => {\n    if (authMethod === \"google\") {\n      const googleAuthProvider = new GoogleAuthProvider();\n      await signInWithRedirect(auth, googleAuthProvider);\n      return [];\n    }\n\n    return [new Error(\"unsupported auth method\")];\n  };\n\n  const signOut = async () => {\n    await firebaseSignOut(auth);\n  };\n\n  return {\n    authState,\n    signIn,\n    signOut\n  };\n};\n\n_s(useAuthState, \"5s2/oJT6vtICe7n1V97DDJczBJ4=\", false, function () {\n  return [useStore];\n});","map":{"version":3,"sources":["/Users/christophervouga/Documents/projects/fake-id/src/data-access/auth-state.ts"],"names":["GoogleAuthProvider","onAuthStateChanged","onFirebaseAuthStateChanged","signInWithRedirect","signOut","firebaseSignOut","useEffect","create","auth","useStore","set","authState","status","setAuthState","useAuthState","firebaseUser","authUser","userId","uid","signIn","authMethod","googleAuthProvider","Error"],"mappings":";;AAAA,SACEA,kBADF,EAEEC,kBAAkB,IAAIC,0BAFxB,EAGEC,kBAHF,EAIEC,OAAO,IAAIC,eAJb,QAKO,eALP;AAMA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SAASC,IAAT,QAAqB,YAArB;AAuBA,MAAMC,QAAQ,GAAGF,MAAM,CAAUG,GAAD,KAAU;AACxCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AADC,GAD6B;AAIxCC,EAAAA,YAAY,EAAGF,SAAD,IAAeD,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD;AAJQ,CAAV,CAAT,CAAvB;AAOA,OAAO,MAAMG,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM;AAAEH,IAAAA,SAAF;AAAaE,IAAAA;AAAb,MAA8BJ,QAAQ,EAA5C;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,WAAOJ,0BAA0B,CAACM,IAAD,EAAQO,YAAD,IAAkB;AACxD,UAAIA,YAAJ,EAAkB;AAChBF,QAAAA,YAAY,CAAC;AACXD,UAAAA,MAAM,EAAE,MADG;AAEXI,UAAAA,QAAQ,EAAE;AACRC,YAAAA,MAAM,EAAEF,YAAY,CAACG;AADb;AAFC,SAAD,CAAZ;AAMA;AACD;;AAEDL,MAAAA,YAAY,CAAC;AACXD,QAAAA,MAAM,EAAE;AADG,OAAD,CAAZ;AAGD,KAdgC,CAAjC;AAeD,GAhBQ,EAgBN,CAACC,YAAD,CAhBM,CAAT;;AAkBA,QAAMM,MAAM,GAAG,OAAO;AAAEC,IAAAA;AAAF,GAAP,KAAuD;AACpE,QAAIA,UAAU,KAAK,QAAnB,EAA6B;AAC3B,YAAMC,kBAAkB,GAAG,IAAIrB,kBAAJ,EAA3B;AAEA,YAAMG,kBAAkB,CAACK,IAAD,EAAOa,kBAAP,CAAxB;AAEA,aAAO,EAAP;AACD;;AAED,WAAO,CAAC,IAAIC,KAAJ,CAAU,yBAAV,CAAD,CAAP;AACD,GAVD;;AAYA,QAAMlB,OAAO,GAAG,YAAY;AAC1B,UAAMC,eAAe,CAACG,IAAD,CAArB;AACD,GAFD;;AAIA,SAAO;AACLG,IAAAA,SADK;AAELQ,IAAAA,MAFK;AAGLf,IAAAA;AAHK,GAAP;AAKD,CA1CM;;GAAMU,Y;UACyBL,Q","sourcesContent":["import {\n  GoogleAuthProvider,\n  onAuthStateChanged as onFirebaseAuthStateChanged,\n  signInWithRedirect,\n  signOut as firebaseSignOut,\n} from \"firebase/auth\";\nimport { useEffect } from \"react\";\nimport create from \"zustand\";\nimport { auth } from \"./firebase\";\n\ntype IAuthMethod = \"google\";\n\ntype IAuthState =\n  | {\n      status: \"loading\";\n    }\n  | {\n      status: \"auth\";\n      authUser: {\n        userId: string;\n      };\n    }\n  | {\n      status: \"unauth\";\n    };\n\ntype IStore = {\n  authState: IAuthState;\n  setAuthState: (authState: IAuthState) => void;\n};\n\nconst useStore = create<IStore>((set) => ({\n  authState: {\n    status: \"loading\",\n  },\n  setAuthState: (authState) => set({ authState }),\n}));\n\nexport const useAuthState = () => {\n  const { authState, setAuthState } = useStore();\n\n  useEffect(() => {\n    return onFirebaseAuthStateChanged(auth, (firebaseUser) => {\n      if (firebaseUser) {\n        setAuthState({\n          status: \"auth\",\n          authUser: {\n            userId: firebaseUser.uid,\n          },\n        });\n        return;\n      }\n\n      setAuthState({\n        status: \"unauth\",\n      });\n    });\n  }, [setAuthState]);\n\n  const signIn = async ({ authMethod }: { authMethod: IAuthMethod }) => {\n    if (authMethod === \"google\") {\n      const googleAuthProvider = new GoogleAuthProvider();\n\n      await signInWithRedirect(auth, googleAuthProvider);\n\n      return [];\n    }\n\n    return [new Error(\"unsupported auth method\")];\n  };\n\n  const signOut = async () => {\n    await firebaseSignOut(auth);\n  };\n\n  return {\n    authState,\n    signIn,\n    signOut,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}