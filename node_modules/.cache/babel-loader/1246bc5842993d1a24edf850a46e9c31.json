{"ast":null,"code":"import _regeneratorRuntime from\"/Users/christophervouga/Documents/projects/fake-id/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/christophervouga/Documents/projects/fake-id/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{collection,doc,onSnapshot,setDoc,updateDoc}from\"firebase/firestore\";import{getDownloadURL,ref,uploadBytes}from\"firebase/storage\";import{useEffect}from\"react\";import create from\"zustand\";import{generateId}from\"../utils\";import{firestore,storage}from\"./firebase\";var useStore=create(function(set){return{profileState:{status:\"loading\"},setProfileState:function setProfileState(profileState){return set({profileState:profileState});}};});var profilesRef=collection(firestore,\"profiles\");var getProfileDocRef=function getProfileDocRef(_ref){var userId=_ref.userId;return doc(profilesRef,userId);};export var useProfile=function useProfile(_ref2){var userId=_ref2.userId;var _useStore=useStore(),profileState=_useStore.profileState,setProfileState=_useStore.setProfileState;useEffect(function(){setDoc(getProfileDocRef({userId:userId}),{},{merge:true});return onSnapshot(getProfileDocRef({userId:userId}),function(doc){var profile=doc.data();if(profile){setProfileState({status:\"success\",profile:profile});return;}});},[userId,setProfileState]);var updateProfilePicture=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref3){var profilePictureFile,storageRef,downloadUrl;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:profilePictureFile=_ref3.profilePictureFile;storageRef=ref(storage,\"profilePictures/\".concat(generateId()));_context.next=4;return uploadBytes(storageRef,profilePictureFile);case 4:_context.next=6;return getDownloadURL(storageRef);case 6:downloadUrl=_context.sent;_context.next=9;return updateDoc(getProfileDocRef({userId:userId}),{profilePictureUrl:downloadUrl});case 9:case\"end\":return _context.stop();}}},_callee);}));return function updateProfilePicture(_x){return _ref4.apply(this,arguments);};}();var updateProfile=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(profile){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return updateDoc(getProfileDocRef({userId:userId}),profile);case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function updateProfile(_x2){return _ref5.apply(this,arguments);};}();return{profileState:profileState,updateProfilePicture:updateProfilePicture,updateProfile:updateProfile};};","map":{"version":3,"sources":["/Users/christophervouga/Documents/projects/fake-id/src/data-access/profile.ts"],"names":["collection","doc","onSnapshot","setDoc","updateDoc","getDownloadURL","ref","uploadBytes","useEffect","create","generateId","firestore","storage","useStore","set","profileState","status","setProfileState","profilesRef","getProfileDocRef","userId","useProfile","merge","profile","data","updateProfilePicture","profilePictureFile","storageRef","downloadUrl","profilePictureUrl","updateProfile"],"mappings":"+UAAA,OACEA,UADF,CAEEC,GAFF,CAGEC,UAHF,CAIEC,MAJF,CAKEC,SALF,KAMO,oBANP,CAOA,OAASC,cAAT,CAAyBC,GAAzB,CAA8BC,WAA9B,KAAiD,kBAAjD,CACA,OAASC,SAAT,KAA0B,OAA1B,CACA,MAAOC,CAAAA,MAAP,KAAmB,SAAnB,CACA,OAASC,UAAT,KAA2B,UAA3B,CACA,OAASC,SAAT,CAAoBC,OAApB,KAAmC,YAAnC,CAuBA,GAAMC,CAAAA,QAAQ,CAAGJ,MAAM,CAAS,SAACK,GAAD,QAAU,CACxCC,YAAY,CAAE,CACZC,MAAM,CAAE,SADI,CAD0B,CAIxCC,eAAe,CAAE,yBAACF,YAAD,QAAkBD,CAAAA,GAAG,CAAC,CAAEC,YAAY,CAAZA,YAAF,CAAD,CAArB,EAJuB,CAAV,EAAT,CAAvB,CAOA,GAAMG,CAAAA,WAAW,CAAGlB,UAAU,CAACW,SAAD,CAAY,UAAZ,CAA9B,CAEA,GAAMQ,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,MAAoC,IAAjCC,CAAAA,MAAiC,MAAjCA,MAAiC,CAC3D,MAAOnB,CAAAA,GAAG,CAACiB,WAAD,CAAcE,MAAd,CAAV,CACD,CAFD,CAIA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,OAAoC,IAAjCD,CAAAA,MAAiC,OAAjCA,MAAiC,CAC5D,cAA0CP,QAAQ,EAAlD,CAAQE,YAAR,WAAQA,YAAR,CAAsBE,eAAtB,WAAsBA,eAAtB,CAEAT,SAAS,CAAC,UAAM,CACdL,MAAM,CAACgB,gBAAgB,CAAC,CAAEC,MAAM,CAANA,MAAF,CAAD,CAAjB,CAA+B,EAA/B,CAAmC,CAAEE,KAAK,CAAE,IAAT,CAAnC,CAAN,CAEA,MAAOpB,CAAAA,UAAU,CAACiB,gBAAgB,CAAC,CAAEC,MAAM,CAANA,MAAF,CAAD,CAAjB,CAA+B,SAACnB,GAAD,CAAS,CACvD,GAAMsB,CAAAA,OAAO,CAAGtB,GAAG,CAACuB,IAAJ,EAAhB,CAEA,GAAID,OAAJ,CAAa,CACXN,eAAe,CAAC,CACdD,MAAM,CAAE,SADM,CAEdO,OAAO,CAAPA,OAFc,CAAD,CAAf,CAIA,OACD,CACF,CAVgB,CAAjB,CAWD,CAdQ,CAcN,CAACH,MAAD,CAASH,eAAT,CAdM,CAAT,CAgBA,GAAMQ,CAAAA,oBAAoB,2FAAG,sLAC3BC,kBAD2B,OAC3BA,kBAD2B,CAKrBC,UALqB,CAKRrB,GAAG,CAACM,OAAD,2BAA6BF,UAAU,EAAvC,EALK,uBAOrBH,CAAAA,WAAW,CAACoB,UAAD,CAAaD,kBAAb,CAPU,8BASDrB,CAAAA,cAAc,CAACsB,UAAD,CATb,QASrBC,WATqB,qCAWrBxB,CAAAA,SAAS,CAACe,gBAAgB,CAAC,CAAEC,MAAM,CAANA,MAAF,CAAD,CAAjB,CAA+B,CAC5CS,iBAAiB,CAAED,WADyB,CAA/B,CAXY,uDAAH,kBAApBH,CAAAA,oBAAoB,6CAA1B,CAgBA,GAAMK,CAAAA,aAAa,2FAAG,kBAAOP,OAAP,6IACdnB,CAAAA,SAAS,CAACe,gBAAgB,CAAC,CAAEC,MAAM,CAANA,MAAF,CAAD,CAAjB,CAA+BG,OAA/B,CADK,yDAAH,kBAAbO,CAAAA,aAAa,8CAAnB,CAIA,MAAO,CACLf,YAAY,CAAZA,YADK,CAELU,oBAAoB,CAApBA,oBAFK,CAGLK,aAAa,CAAbA,aAHK,CAAP,CAKD,CA5CM","sourcesContent":["import {\n  collection,\n  doc,\n  onSnapshot,\n  setDoc,\n  updateDoc,\n} from \"firebase/firestore\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { useEffect } from \"react\";\nimport create from \"zustand\";\nimport { generateId } from \"../utils\";\nimport { firestore, storage } from \"./firebase\";\n\ntype IProfile = {\n  userId: string;\n  displayName?: string;\n  profilePictureUrl?: string;\n  gcuLastUpdatedDatetime?: string;\n};\n\ntype IProfileState =\n  | {\n      status: \"loading\";\n    }\n  | {\n      status: \"success\";\n      profile: IProfile;\n    };\n\ntype IStore = {\n  profileState: IProfileState;\n  setProfileState: (profileState: IProfileState) => void;\n};\n\nconst useStore = create<IStore>((set) => ({\n  profileState: {\n    status: \"loading\",\n  },\n  setProfileState: (profileState) => set({ profileState }),\n}));\n\nconst profilesRef = collection(firestore, \"profiles\");\n\nconst getProfileDocRef = ({ userId }: { userId: string }) => {\n  return doc(profilesRef, userId);\n};\n\nexport const useProfile = ({ userId }: { userId: string }) => {\n  const { profileState, setProfileState } = useStore();\n\n  useEffect(() => {\n    setDoc(getProfileDocRef({ userId }), {}, { merge: true });\n\n    return onSnapshot(getProfileDocRef({ userId }), (doc) => {\n      const profile = doc.data() as IProfile | undefined;\n\n      if (profile) {\n        setProfileState({\n          status: \"success\",\n          profile,\n        });\n        return;\n      }\n    });\n  }, [userId, setProfileState]);\n\n  const updateProfilePicture = async ({\n    profilePictureFile,\n  }: {\n    profilePictureFile: File;\n  }) => {\n    const storageRef = ref(storage, `profilePictures/${generateId()}`);\n\n    await uploadBytes(storageRef, profilePictureFile);\n\n    const downloadUrl = await getDownloadURL(storageRef);\n\n    await updateDoc(getProfileDocRef({ userId }), {\n      profilePictureUrl: downloadUrl,\n    });\n  };\n\n  const updateProfile = async (profile: Partial<IProfile>) => {\n    await updateDoc(getProfileDocRef({ userId }), profile);\n  };\n\n  return {\n    profileState,\n    updateProfilePicture,\n    updateProfile,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}