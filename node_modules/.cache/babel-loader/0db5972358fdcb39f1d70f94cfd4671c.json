{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { collection, doc, onSnapshot, setDoc, updateDoc } from \"firebase/firestore\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { useEffect } from \"react\";\nimport create from \"zustand\";\nimport { generateId } from \"../utils\";\nimport { firestore, storage } from \"./firebase\";\nconst useStore = create(set => ({\n  profileState: {\n    status: \"loading\"\n  },\n  setProfileState: profileState => set({\n    profileState\n  })\n}));\nconst profilesRef = collection(firestore, \"profiles\");\n\nconst getProfileDocRef = ({\n  userId\n}) => {\n  return doc(profilesRef, userId);\n};\n\nexport const useProfile = ({\n  userId\n}) => {\n  _s();\n\n  const {\n    profileState,\n    setProfileState\n  } = useStore();\n  useEffect(() => {\n    setDoc(getProfileDocRef({\n      userId\n    }), {}, {\n      merge: true\n    });\n    return onSnapshot(getProfileDocRef({\n      userId\n    }), doc => {\n      const profile = doc.data();\n\n      if (profile) {\n        setProfileState({\n          status: \"success\",\n          profile\n        });\n        return;\n      }\n\n      setProfileState({\n        status: \"error\"\n      });\n    });\n  }, [userId, setProfileState]);\n\n  const updateProfilePicture = async ({\n    profilePictureFile\n  }) => {\n    const storageRef = ref(storage, `profilePictures/${generateId()}`);\n    await uploadBytes(storageRef, profilePictureFile);\n    const downloadUrl = await getDownloadURL(storageRef);\n    await updateDoc(getProfileDocRef({\n      userId\n    }), {\n      profilePictureUrl: downloadUrl\n    });\n  };\n\n  const updateDisplayName = async ({\n    displayName\n  }) => {\n    await updateDoc(getProfileDocRef({\n      userId\n    }), {\n      displayName\n    });\n  };\n\n  return {\n    profileState,\n    updateProfilePicture,\n    updateDisplayName\n  };\n};\n\n_s(useProfile, \"C6Y+yllOCkilbkmA+vYrNDh0c/g=\", false, function () {\n  return [useStore];\n});","map":{"version":3,"sources":["/Users/christophervouga/Documents/projects/fake-id/src/data-access/profile.ts"],"names":["collection","doc","onSnapshot","setDoc","updateDoc","getDownloadURL","ref","uploadBytes","useEffect","create","generateId","firestore","storage","useStore","set","profileState","status","setProfileState","profilesRef","getProfileDocRef","userId","useProfile","merge","profile","data","updateProfilePicture","profilePictureFile","storageRef","downloadUrl","profilePictureUrl","updateDisplayName","displayName"],"mappings":";;AAAA,SACEA,UADF,EAEEC,GAFF,EAGEC,UAHF,EAIEC,MAJF,EAKEC,SALF,QAMO,oBANP;AAOA,SAASC,cAAT,EAAyBC,GAAzB,EAA8BC,WAA9B,QAAiD,kBAAjD;AACA,SAASC,SAAT,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;AAyBA,MAAMC,QAAQ,GAAGJ,MAAM,CAAUK,GAAD,KAAU;AACxCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE;AADI,GAD0B;AAIxCC,EAAAA,eAAe,EAAGF,YAAD,IAAkBD,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD;AAJE,CAAV,CAAT,CAAvB;AAOA,MAAMG,WAAW,GAAGlB,UAAU,CAACW,SAAD,EAAY,UAAZ,CAA9B;;AAEA,MAAMQ,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoC;AAC3D,SAAOnB,GAAG,CAACiB,WAAD,EAAcE,MAAd,CAAV;AACD,CAFD;;AAIA,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAED,EAAAA;AAAF,CAAD,KAAoC;AAAA;;AAC5D,QAAM;AAAEL,IAAAA,YAAF;AAAgBE,IAAAA;AAAhB,MAAoCJ,QAAQ,EAAlD;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdL,IAAAA,MAAM,CAACgB,gBAAgB,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAjB,EAA+B,EAA/B,EAAmC;AAAEE,MAAAA,KAAK,EAAE;AAAT,KAAnC,CAAN;AAEA,WAAOpB,UAAU,CAACiB,gBAAgB,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAjB,EAAgCnB,GAAD,IAAS;AACvD,YAAMsB,OAAO,GAAGtB,GAAG,CAACuB,IAAJ,EAAhB;;AACA,UAAID,OAAJ,EAAa;AACXN,QAAAA,eAAe,CAAC;AACdD,UAAAA,MAAM,EAAE,SADM;AAEdO,UAAAA;AAFc,SAAD,CAAf;AAIA;AACD;;AAEDN,MAAAA,eAAe,CAAC;AACdD,QAAAA,MAAM,EAAE;AADM,OAAD,CAAf;AAGD,KAbgB,CAAjB;AAcD,GAjBQ,EAiBN,CAACI,MAAD,EAASH,eAAT,CAjBM,CAAT;;AAmBA,QAAMQ,oBAAoB,GAAG,OAAO;AAClCC,IAAAA;AADkC,GAAP,KAIvB;AACJ,UAAMC,UAAU,GAAGrB,GAAG,CAACM,OAAD,EAAW,mBAAkBF,UAAU,EAAG,EAA1C,CAAtB;AAEA,UAAMH,WAAW,CAACoB,UAAD,EAAaD,kBAAb,CAAjB;AAEA,UAAME,WAAW,GAAG,MAAMvB,cAAc,CAACsB,UAAD,CAAxC;AAEA,UAAMvB,SAAS,CAACe,gBAAgB,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAjB,EAA+B;AAC5CS,MAAAA,iBAAiB,EAAED;AADyB,KAA/B,CAAf;AAGD,GAdD;;AAgBA,QAAME,iBAAiB,GAAG,OAAO;AAC/BC,IAAAA;AAD+B,GAAP,KAIpB;AACJ,UAAM3B,SAAS,CAACe,gBAAgB,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAjB,EAA+B;AAC5CW,MAAAA;AAD4C,KAA/B,CAAf;AAGD,GARD;;AAUA,SAAO;AACLhB,IAAAA,YADK;AAELU,IAAAA,oBAFK;AAGLK,IAAAA;AAHK,GAAP;AAKD,CArDM;;GAAMT,U;UAC+BR,Q","sourcesContent":["import {\n  collection,\n  doc,\n  onSnapshot,\n  setDoc,\n  updateDoc,\n} from \"firebase/firestore\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { useEffect, useRef } from \"react\";\nimport create from \"zustand\";\nimport { generateId } from \"../utils\";\nimport { firestore, storage } from \"./firebase\";\n\ntype IProfile = {\n  userId: string;\n  displayName?: string;\n  profilePictureUrl?: string;\n};\n\ntype IProfileState =\n  | {\n      status: \"loading\";\n    }\n  | {\n      status: \"success\";\n      profile: IProfile;\n    }\n  | {\n      status: \"error\";\n    };\n\ntype IStore = {\n  profileState: IProfileState;\n  setProfileState: (profileState: IProfileState) => void;\n};\n\nconst useStore = create<IStore>((set) => ({\n  profileState: {\n    status: \"loading\",\n  },\n  setProfileState: (profileState) => set({ profileState }),\n}));\n\nconst profilesRef = collection(firestore, \"profiles\");\n\nconst getProfileDocRef = ({ userId }: { userId: string }) => {\n  return doc(profilesRef, userId);\n};\n\nexport const useProfile = ({ userId }: { userId: string }) => {\n  const { profileState, setProfileState } = useStore();\n\n  useEffect(() => {\n    setDoc(getProfileDocRef({ userId }), {}, { merge: true });\n\n    return onSnapshot(getProfileDocRef({ userId }), (doc) => {\n      const profile = doc.data() as IProfile | undefined;\n      if (profile) {\n        setProfileState({\n          status: \"success\",\n          profile,\n        });\n        return;\n      }\n\n      setProfileState({\n        status: \"error\",\n      });\n    });\n  }, [userId, setProfileState]);\n\n  const updateProfilePicture = async ({\n    profilePictureFile,\n  }: {\n    profilePictureFile: File;\n  }) => {\n    const storageRef = ref(storage, `profilePictures/${generateId()}`);\n\n    await uploadBytes(storageRef, profilePictureFile);\n\n    const downloadUrl = await getDownloadURL(storageRef);\n\n    await updateDoc(getProfileDocRef({ userId }), {\n      profilePictureUrl: downloadUrl,\n    });\n  };\n\n  const updateDisplayName = async ({\n    displayName,\n  }: {\n    displayName: string;\n  }) => {\n    await updateDoc(getProfileDocRef({ userId }), {\n      displayName,\n    });\n  };\n\n  return {\n    profileState,\n    updateProfilePicture,\n    updateDisplayName,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}