{"ast":null,"code":"import { useRef, useEffect, useMemo } from 'react';\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Specify invoking on the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\n\nexport default function useDebouncedCallback(func, wait, options) {\n  var _this = this;\n\n  var lastCallTime = useRef(null);\n  var lastInvokeTime = useRef(0);\n  var timerId = useRef(null);\n  var lastArgs = useRef([]);\n  var lastThis = useRef();\n  var result = useRef();\n  var funcRef = useRef(func);\n  var mounted = useRef(true);\n  funcRef.current = func; // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n\n  var useRAF = !wait && wait !== 0 && typeof window !== 'undefined';\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  wait = +wait || 0;\n  options = options || {};\n  var leading = !!options.leading;\n  var trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n\n  var maxing = ('maxWait' in options);\n  var maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n  useEffect(function () {\n    mounted.current = true;\n    return function () {\n      mounted.current = false;\n    };\n  }, []); // You may have a question, why we have so many code under the useMemo definition.\n  //\n  // This was made as we want to escape from useCallback hell and\n  // not to initialize a number of functions each time useDebouncedCallback is called.\n  //\n  // It means that we have less garbage for our GC calls which improves performance.\n  // Also, it makes this library smaller.\n  //\n  // And the last reason, that the code without lots of useCallback with deps is easier to read.\n  // You have only one place for that.\n\n  var debounced = useMemo(function () {\n    var invokeFunc = function (time) {\n      var args = lastArgs.current;\n      var thisArg = lastThis.current;\n      lastArgs.current = lastThis.current = null;\n      lastInvokeTime.current = time;\n      return result.current = funcRef.current.apply(thisArg, args);\n    };\n\n    var startTimer = function (pendingFunc, wait) {\n      if (useRAF) cancelAnimationFrame(timerId.current);\n      timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait);\n    };\n\n    var shouldInvoke = function (time) {\n      if (!mounted.current) return false;\n      var timeSinceLastCall = time - lastCallTime.current;\n      var timeSinceLastInvoke = time - lastInvokeTime.current; // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n\n      return !lastCallTime.current || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n    };\n\n    var trailingEdge = function (time) {\n      timerId.current = null; // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n\n      if (trailing && lastArgs.current) {\n        return invokeFunc(time);\n      }\n\n      lastArgs.current = lastThis.current = null;\n      return result.current;\n    };\n\n    var timerExpired = function () {\n      var time = Date.now();\n\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      } // https://github.com/xnimorz/use-debounce/issues/97\n\n\n      if (!mounted.current) {\n        return;\n      } // Remaining wait calculation\n\n\n      var timeSinceLastCall = time - lastCallTime.current;\n      var timeSinceLastInvoke = time - lastInvokeTime.current;\n      var timeWaiting = wait - timeSinceLastCall;\n      var remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting; // Restart the timer\n\n      startTimer(timerExpired, remainingWait);\n    };\n\n    var func = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var time = Date.now();\n      var isInvoking = shouldInvoke(time);\n      lastArgs.current = args;\n      lastThis.current = _this;\n      lastCallTime.current = time;\n\n      if (isInvoking) {\n        if (!timerId.current && mounted.current) {\n          // Reset any `maxWait` timer.\n          lastInvokeTime.current = lastCallTime.current; // Start the timer for the trailing edge.\n\n          startTimer(timerExpired, wait); // Invoke the leading edge.\n\n          return leading ? invokeFunc(lastCallTime.current) : result.current;\n        }\n\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          startTimer(timerExpired, wait);\n          return invokeFunc(lastCallTime.current);\n        }\n      }\n\n      if (!timerId.current) {\n        startTimer(timerExpired, wait);\n      }\n\n      return result.current;\n    };\n\n    func.cancel = function () {\n      if (timerId.current) {\n        useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);\n      }\n\n      lastInvokeTime.current = 0;\n      lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;\n    };\n\n    func.isPending = function () {\n      return !!timerId.current;\n    };\n\n    func.flush = function () {\n      return !timerId.current ? result.current : trailingEdge(Date.now());\n    };\n\n    return func;\n  }, [leading, maxing, wait, maxWait, trailing, useRAF]);\n  return debounced;\n}","map":{"version":3,"sources":["/Users/christophervouga/Documents/projects/fake-id/node_modules/use-debounce/esm/useDebouncedCallback.js"],"names":["useRef","useEffect","useMemo","useDebouncedCallback","func","wait","options","_this","lastCallTime","lastInvokeTime","timerId","lastArgs","lastThis","result","funcRef","mounted","current","useRAF","window","TypeError","leading","trailing","maxing","maxWait","Math","max","debounced","invokeFunc","time","args","thisArg","apply","startTimer","pendingFunc","cancelAnimationFrame","requestAnimationFrame","setTimeout","shouldInvoke","timeSinceLastCall","timeSinceLastInvoke","trailingEdge","timerExpired","Date","now","timeWaiting","remainingWait","min","_i","arguments","length","isInvoking","cancel","clearTimeout","isPending","flush"],"mappings":"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","sourcesContent":["import { useRef, useEffect, useMemo } from 'react';\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Specify invoking on the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback(func, wait, options) {\n    var _this = this;\n    var lastCallTime = useRef(null);\n    var lastInvokeTime = useRef(0);\n    var timerId = useRef(null);\n    var lastArgs = useRef([]);\n    var lastThis = useRef();\n    var result = useRef();\n    var funcRef = useRef(func);\n    var mounted = useRef(true);\n    funcRef.current = func;\n    // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n    var useRAF = !wait && wait !== 0 && typeof window !== 'undefined';\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = +wait || 0;\n    options = options || {};\n    var leading = !!options.leading;\n    var trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n    var maxing = 'maxWait' in options;\n    var maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n    useEffect(function () {\n        mounted.current = true;\n        return function () {\n            mounted.current = false;\n        };\n    }, []);\n    // You may have a question, why we have so many code under the useMemo definition.\n    //\n    // This was made as we want to escape from useCallback hell and\n    // not to initialize a number of functions each time useDebouncedCallback is called.\n    //\n    // It means that we have less garbage for our GC calls which improves performance.\n    // Also, it makes this library smaller.\n    //\n    // And the last reason, that the code without lots of useCallback with deps is easier to read.\n    // You have only one place for that.\n    var debounced = useMemo(function () {\n        var invokeFunc = function (time) {\n            var args = lastArgs.current;\n            var thisArg = lastThis.current;\n            lastArgs.current = lastThis.current = null;\n            lastInvokeTime.current = time;\n            return (result.current = funcRef.current.apply(thisArg, args));\n        };\n        var startTimer = function (pendingFunc, wait) {\n            if (useRAF)\n                cancelAnimationFrame(timerId.current);\n            timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait);\n        };\n        var shouldInvoke = function (time) {\n            if (!mounted.current)\n                return false;\n            var timeSinceLastCall = time - lastCallTime.current;\n            var timeSinceLastInvoke = time - lastInvokeTime.current;\n            // Either this is the first call, activity has stopped and we're at the\n            // trailing edge, the system time has gone backwards and we're treating\n            // it as the trailing edge, or we've hit the `maxWait` limit.\n            return (!lastCallTime.current ||\n                timeSinceLastCall >= wait ||\n                timeSinceLastCall < 0 ||\n                (maxing && timeSinceLastInvoke >= maxWait));\n        };\n        var trailingEdge = function (time) {\n            timerId.current = null;\n            // Only invoke if we have `lastArgs` which means `func` has been\n            // debounced at least once.\n            if (trailing && lastArgs.current) {\n                return invokeFunc(time);\n            }\n            lastArgs.current = lastThis.current = null;\n            return result.current;\n        };\n        var timerExpired = function () {\n            var time = Date.now();\n            if (shouldInvoke(time)) {\n                return trailingEdge(time);\n            }\n            // https://github.com/xnimorz/use-debounce/issues/97\n            if (!mounted.current) {\n                return;\n            }\n            // Remaining wait calculation\n            var timeSinceLastCall = time - lastCallTime.current;\n            var timeSinceLastInvoke = time - lastInvokeTime.current;\n            var timeWaiting = wait - timeSinceLastCall;\n            var remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n            // Restart the timer\n            startTimer(timerExpired, remainingWait);\n        };\n        var func = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var time = Date.now();\n            var isInvoking = shouldInvoke(time);\n            lastArgs.current = args;\n            lastThis.current = _this;\n            lastCallTime.current = time;\n            if (isInvoking) {\n                if (!timerId.current && mounted.current) {\n                    // Reset any `maxWait` timer.\n                    lastInvokeTime.current = lastCallTime.current;\n                    // Start the timer for the trailing edge.\n                    startTimer(timerExpired, wait);\n                    // Invoke the leading edge.\n                    return leading ? invokeFunc(lastCallTime.current) : result.current;\n                }\n                if (maxing) {\n                    // Handle invocations in a tight loop.\n                    startTimer(timerExpired, wait);\n                    return invokeFunc(lastCallTime.current);\n                }\n            }\n            if (!timerId.current) {\n                startTimer(timerExpired, wait);\n            }\n            return result.current;\n        };\n        func.cancel = function () {\n            if (timerId.current) {\n                useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);\n            }\n            lastInvokeTime.current = 0;\n            lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;\n        };\n        func.isPending = function () {\n            return !!timerId.current;\n        };\n        func.flush = function () {\n            return !timerId.current ? result.current : trailingEdge(Date.now());\n        };\n        return func;\n    }, [leading, maxing, wait, maxWait, trailing, useRAF]);\n    return debounced;\n}\n"]},"metadata":{},"sourceType":"module"}