{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { addDoc, onSnapshot, collection, doc } from \"firebase/firestore\";\nimport { useEffect } from \"react\";\nimport create from \"zustand\";\nimport { firestore, storage } from \"./firebase\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { generateId } from \"../utils\";\nconst useStore = create(set => ({\n  setProfile: profile => set({\n    profile\n  })\n}));\nconst profilesRef = collection(firestore, \"profiles\");\nexport const useProfile = ({\n  userId\n}) => {\n  _s();\n\n  const {\n    profile,\n    setProfile\n  } = useStore();\n  useEffect(() => {\n    return onSnapshot(doc(firestore, \"profiles\", userId), doc => {\n      const profile = doc.data();\n      setProfile(profile);\n    });\n  }, [userId, setProfile]);\n\n  const uploadProfilePicture = async profilePictureFile => {\n    if (profilePictureFile) {\n      const storageRef = ref(storage, `profilePictures/${generateId()}`);\n      await uploadBytes(storageRef, profilePictureFile);\n      const downloadUrl = await getDownloadURL(storageRef);\n      return downloadUrl;\n    }\n\n    return null;\n  };\n\n  const addProfile = async ({\n    profilePictureFile,\n    displayName,\n    userId\n  }) => {\n    await uploadProfilePicture();\n    const profile = {\n      displayName,\n      userId,\n      profilePictureUrl: downloadUrl\n    };\n    await addDoc(profilesRef, profile);\n  };\n\n  return {\n    profile,\n    addProfile\n  };\n};\n\n_s(useProfile, \"xyyd5sA9q1M6QRBFRGPpqQqIzYY=\", false, function () {\n  return [useStore];\n});","map":{"version":3,"sources":["/Users/christophervouga/Documents/projects/fake-id/src/data-access/profile.ts"],"names":["addDoc","onSnapshot","collection","doc","useEffect","create","firestore","storage","getDownloadURL","ref","uploadBytes","generateId","useStore","set","setProfile","profile","profilesRef","useProfile","userId","data","uploadProfilePicture","profilePictureFile","storageRef","downloadUrl","addProfile","displayName","profilePictureUrl"],"mappings":";;AAAA,SACEA,MADF,EAEEC,UAFF,EAGEC,UAHF,EAKEC,GALF,QAOO,oBAPP;AAQA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;AACA,SAASC,cAAT,EAAyBC,GAAzB,EAA8BC,WAA9B,QAAiD,kBAAjD;AACA,SAASC,UAAT,QAA2B,UAA3B;AAaA,MAAMC,QAAQ,GAAGP,MAAM,CAAUQ,GAAD,KAAU;AACxCC,EAAAA,UAAU,EAAGC,OAAD,IAAaF,GAAG,CAAC;AAAEE,IAAAA;AAAF,GAAD;AADY,CAAV,CAAT,CAAvB;AAIA,MAAMC,WAAW,GAAGd,UAAU,CAACI,SAAD,EAAY,UAAZ,CAA9B;AAEA,OAAO,MAAMW,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoC;AAAA;;AAC5D,QAAM;AAAEH,IAAAA,OAAF;AAAWD,IAAAA;AAAX,MAA0BF,QAAQ,EAAxC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,WAAOH,UAAU,CAACE,GAAG,CAACG,SAAD,EAAY,UAAZ,EAAwBY,MAAxB,CAAJ,EAAsCf,GAAD,IAAS;AAC7D,YAAMY,OAAO,GAAGZ,GAAG,CAACgB,IAAJ,EAAhB;AACAL,MAAAA,UAAU,CAACC,OAAD,CAAV;AACD,KAHgB,CAAjB;AAID,GALQ,EAKN,CAACG,MAAD,EAASJ,UAAT,CALM,CAAT;;AAOA,QAAMM,oBAAoB,GAAG,MAAOC,kBAAP,IAAqC;AAChE,QAAIA,kBAAJ,EAAwB;AACtB,YAAMC,UAAU,GAAGb,GAAG,CAACF,OAAD,EAAW,mBAAkBI,UAAU,EAAG,EAA1C,CAAtB;AAEA,YAAMD,WAAW,CAACY,UAAD,EAAaD,kBAAb,CAAjB;AAEA,YAAME,WAAW,GAAG,MAAMf,cAAc,CAACc,UAAD,CAAxC;AAEA,aAAOC,WAAP;AACD;;AACD,WAAO,IAAP;AACD,GAXD;;AAaA,QAAMC,UAAU,GAAG,OAAO;AACxBH,IAAAA,kBADwB;AAExBI,IAAAA,WAFwB;AAGxBP,IAAAA;AAHwB,GAAP,KAQb;AACJ,UAAME,oBAAoB,EAA1B;AACA,UAAML,OAAiB,GAAG;AACxBU,MAAAA,WADwB;AAExBP,MAAAA,MAFwB;AAGxBQ,MAAAA,iBAAiB,EAAEH;AAHK,KAA1B;AAMA,UAAMvB,MAAM,CAACgB,WAAD,EAAcD,OAAd,CAAZ;AACD,GAjBD;;AAmBA,SAAO;AACLA,IAAAA,OADK;AAELS,IAAAA;AAFK,GAAP;AAID,CA9CM;;GAAMP,U;UACqBL,Q","sourcesContent":["import {\n  addDoc,\n  onSnapshot,\n  collection,\n  query,\n  doc,\n  where,\n} from \"firebase/firestore\";\nimport { useEffect } from \"react\";\nimport create from \"zustand\";\nimport { firestore, storage } from \"./firebase\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { generateId } from \"../utils\";\n\ntype IProfile = {\n  userId: string;\n  displayName?: string;\n  profilePictureUrl?: string;\n};\n\ntype IStore = {\n  profile?: Partial<IProfile>;\n  setProfile: (profile?: IProfile) => void;\n};\n\nconst useStore = create<IStore>((set) => ({\n  setProfile: (profile) => set({ profile }),\n}));\n\nconst profilesRef = collection(firestore, \"profiles\");\n\nexport const useProfile = ({ userId }: { userId: string }) => {\n  const { profile, setProfile } = useStore();\n\n  useEffect(() => {\n    return onSnapshot(doc(firestore, \"profiles\", userId), (doc) => {\n      const profile = doc.data() as IProfile | undefined;\n      setProfile(profile);\n    });\n  }, [userId, setProfile]);\n\n  const uploadProfilePicture = async (profilePictureFile?: File) => {\n    if (profilePictureFile) {\n      const storageRef = ref(storage, `profilePictures/${generateId()}`);\n\n      await uploadBytes(storageRef, profilePictureFile);\n\n      const downloadUrl = await getDownloadURL(storageRef);\n\n      return downloadUrl;\n    }\n    return null;\n  };\n\n  const addProfile = async ({\n    profilePictureFile,\n    displayName,\n    userId,\n  }: {\n    displayName: string;\n    userId: string;\n    profilePictureFile?: File;\n  }) => {\n    await uploadProfilePicture();\n    const profile: IProfile = {\n      displayName,\n      userId,\n      profilePictureUrl: downloadUrl,\n    };\n\n    await addDoc(profilesRef, profile);\n  };\n\n  return {\n    profile,\n    addProfile,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}