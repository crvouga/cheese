{"ast":null,"code":"var _jsxFileName = \"/Users/christophervouga/Documents/projects/fake-id/src/gcu/GCULoadingBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport classes from \"./GCULoadingBar.module.css\";\nimport { GCU_COLOR } from \"./theme\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst transition = {\n  leftToRight: \"rightToLeft\",\n  rightToLeft: \"leftToRight\"\n};\nexport const GCULoadingBar = () => {\n  _s();\n\n  const [state, setState] = useState(\"->\");\n  const ref = useRef(null);\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener(\"animationend\", event => {\n        console.log(\"END\");\n        setState(state => {\n          return transition[state];\n        });\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"28px\",\n        display: \"bold\",\n        transform: state === \"<-\" ? \"rotate(180deg)\" : undefined\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ref,\n        className: classes.animateWidth,\n        style: {\n          backgroundColor: GCU_COLOR.green,\n          width: \"100%\",\n          height: \"100%\",\n          transform: state === \"<-\" ? \"rotate(-180deg)\" : undefined\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(GCULoadingBar, \"6wBLYdgMbfeJyd5Q110ZpbGDxyU=\");\n\n_c = GCULoadingBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"GCULoadingBar\");","map":{"version":3,"sources":["/Users/christophervouga/Documents/projects/fake-id/src/gcu/GCULoadingBar.tsx"],"names":["React","useRef","useEffect","useState","classes","GCU_COLOR","transition","leftToRight","rightToLeft","GCULoadingBar","state","setState","ref","current","addEventListener","event","console","log","width","height","display","transform","undefined","animateWidth","backgroundColor","green"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAASC,SAAT,QAA0B,SAA1B;;;AAIA,MAAMC,UAAyC,GAAG;AAChDC,EAAAA,WAAW,EAAE,aADmC;AAEhDC,EAAAA,WAAW,EAAE;AAFmC,CAAlD;AAKA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAS,IAAT,CAAlC;AACA,QAAMS,GAAG,GAAGX,MAAM,CAAwB,IAAxB,CAAlB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,GAAG,CAACC,OAAR,EAAiB;AACfD,MAAAA,GAAG,CAACC,OAAJ,CAAYC,gBAAZ,CAA6B,cAA7B,EAA8CC,KAAD,IAAW;AACtDC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAN,QAAAA,QAAQ,CAAED,KAAD,IAAW;AAClB,iBAAOJ,UAAU,CAACI,KAAD,CAAjB;AACD,SAFO,CAAR;AAGD,OALD;AAMD;AACF,GATQ,EASN,EATM,CAAT;AAWA,sBACE;AAAA,2BACE;AACE,MAAA,KAAK,EAAE;AACLQ,QAAAA,KAAK,EAAE,MADF;AAELC,QAAAA,MAAM,EAAE,MAFH;AAGLC,QAAAA,OAAO,EAAE,MAHJ;AAILC,QAAAA,SAAS,EAAEX,KAAK,KAAK,IAAV,GAAiB,gBAAjB,GAAoCY;AAJ1C,OADT;AAAA,6BAQE;AACE,QAAA,GAAG,EAAEV,GADP;AAEE,QAAA,SAAS,EAAER,OAAO,CAACmB,YAFrB;AAGE,QAAA,KAAK,EAAE;AACLC,UAAAA,eAAe,EAAEnB,SAAS,CAACoB,KADtB;AAELP,UAAAA,KAAK,EAAE,MAFF;AAGLC,UAAAA,MAAM,EAAE,MAHH;AAILE,UAAAA,SAAS,EAAEX,KAAK,KAAK,IAAV,GAAiB,iBAAjB,GAAqCY;AAJ3C;AAHT;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAuBD,CAtCM;;GAAMb,a;;KAAAA,a","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport classes from \"./GCULoadingBar.module.css\";\nimport { GCU_COLOR } from \"./theme\";\n\ntype IState = \"rightToLeft\" | \"leftToRight\";\n\nconst transition: { [state in IState]: IState } = {\n  leftToRight: \"rightToLeft\",\n  rightToLeft: \"leftToRight\",\n};\n\nexport const GCULoadingBar = () => {\n  const [state, setState] = useState<IState>(\"->\");\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener(\"animationend\", (event) => {\n        console.log(\"END\");\n        setState((state) => {\n          return transition[state];\n        });\n      });\n    }\n  }, []);\n\n  return (\n    <>\n      <div\n        style={{\n          width: \"100%\",\n          height: \"28px\",\n          display: \"bold\",\n          transform: state === \"<-\" ? \"rotate(180deg)\" : undefined,\n        }}\n      >\n        <div\n          ref={ref}\n          className={classes.animateWidth}\n          style={{\n            backgroundColor: GCU_COLOR.green,\n            width: \"100%\",\n            height: \"100%\",\n            transform: state === \"<-\" ? \"rotate(-180deg)\" : undefined,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}